<cfcomponent output="false">
	<cfproperty name="adminAPIFacade" inject="model:adminAPI.adminAPIFacade" scope="variables">
	<cfproperty name="code" inject="model:code:codeService" scope="variables">
	<cfproperty name="templateBasePath" inject="coldbox:setting:templateBasePath">

	<cffunction name="init" access="public" returntype="generatorService" output="false">
		<cfreturn this />
	</cffunction>

	<cffunction name="setTemplateBasePath" access="public" returntype="boolean" output="false">
		<cfargument name="templatePath" type="string" required="true" />
		<cfset var success = true />
		<cfset variables.templateBasePath = arguments.templateBasePath />
	</cffunction>

	<cffunction name="getDSNs" access="public" returntype="array" output="false">
		<cfreturn variables.adminAPIFacade.getDatasources() />
	</cffunction>

	<cffunction name="getDSN" access="public" returntype="model.datasource.datasource" output="false">
		<cfargument name="dsn" type="string" required="yes" />

		<cfreturn variables.adminAPIFacade.getDatasource(arguments.dsn) />
	</cffunction>

	<cffunction name="getTables" access="public" returntype="array" output="false">
		<cfargument name="dsn" type="string" required="yes" />

		<cfreturn variables.adminAPIFacade.getDatasource(arguments.dsn).getDbms().getTables() />
	</cffunction>

	<cffunction name="getTableXML" access="public" returntype="xml" output="false">
		<cfargument name="dsn" type="string" required="yes" />
		<cfargument name="table" type="string" required="yes" />
		<cfset var objDBMS = variables.adminAPIFacade.getDatasource(arguments.dsn).getDbms()>

		<cfset objDBMS.setComponentPath(arguments.table) />
		<cfset objDBMS.setTable(arguments.table)>
		<cfreturn objDBMS.getTableXML()>
	</cffunction>


	<!--- TODO: I may need a better place for this logic --->
	<cffunction name="getProjectTemplates" access="public" returntype="array" output="false">
		<cfset var qryTemplateFolders = "" />
		<cfset var arrTemplateFolders = arrayNew(1) />
		<cfset arrayAppend(arrTemplateFolders,"default") />
		<cfdirectory name="qryTemplateFolders" action="list" directory="#expandPath(variables.templateBasePath & 'projects')#" type="dir"/>
		<cfloop query="qryTemplateFolders">
			<cfset arrayAppend(arrTemplateFolders,qryTemplateFolders.name) />
		</cfloop>
		<cfreturn arrTemplateFolders />
	</cffunction>

	<cffunction name="getGeneratedCFCs" access="public" returntype="array" output="false">
		<cfargument name="dsn" type="string" required="yes" />
		<cfargument name="table" type="string" required="yes" />
		<cfargument name="projectPath" type="string" required="no" default="" />
		<cfargument name="tableConfig" type="struct" required="yes" default="" />
		<cfargument name="fileConfig" type="struct" required="yes" default="" />
		<cfargument name="rootPath" type="string" required="no" default="/" />
		<cfset var code = arrayNew(1) />
		<cfset var i = 0 />
		<cfset var thisPage = "" />
		<cfset var separator = getOSFileSeparator() />

		<!--- TODO: this is a fix for if project path is default, its is passed as empty --->
		<cfif arguments.projectPath eq "default">
			<cfset arguments.projectPath = "" />
		</cfif>
		<cfif len(arguments.rootPath) and directoryExists(arguments.rootPath)>
			<cfset arguments.rootPath = arguments.rootPath & separator & replace(arguments.table,".",separator,"all") />
		<cfelse>
			<cfset arguments.rootPath = "" />
		</cfif>
		<!--- configure the code template component with the dsn --->
		<cfset variables.code.configure(arguments.dsn,variables.templateBasePath,arguments.projectPath,arguments.rootPath) />
		<cfset variables.adminAPIFacade.getDatasource(arguments.dsn).getDbms().setComponentPath(arguments.fileconfig) />
		<cfset variables.adminAPIFacade.getDatasource(arguments.dsn).getDbms().setTable(arguments.table)>
		<!--- get an array containing the generated code --->

		<cfset code = variables.code.getComponents(variables.adminAPIFacade.getDatasource(arguments.dsn).getDbms().getTableXML()) />
				<!--- try to remove extraneous line breaks and spaces that seem to appear in flex in some cases but not in CF --->
		<cfdump var="#code#"><cfabort>

		<cfif arguments.stripLineBreaks>
			<cfloop from="1" to="#arrayLen(code)#" index="i">
				<cfset thisPage = code[i] />
				<cfset thisPage.setContent(trim(replaceNoCase(thisPage.getContent(),"#chr(10)#","","all")))>
			</cfloop>
		</cfif>
		<cfreturn code />
	</cffunction>

	<!--- TODO: I may need a better place for this logic as well --->
	<cffunction name="saveFile" access="public" returntype="string" output="false">
		<cfargument name="code" type="string" required="yes" />
		<cfargument name="filePath" type="string" required="yes" />

		<cfset var rtnMessage = "Save Succeeded" />
		<cfset var thePath = getDirectoryFromPath(arguments.filePath) />

		<cftry>
			<!--- create the directory if it doesn't currently exist --->
			<cfif not directoryExists(thePath)>
				<cfdirectory action="create" directory="#thePath#" />
			</cfif>
			<cffile action="write" file="#arguments.filePath#" output="#arguments.code#" charset="utf-8" />
			<cfcatch type="any">
				<cfset rtnMessage = "Save Failed: " & cfcatch.Message />
			</cfcatch>
		</cftry>
		<cfreturn rtnMessage />
	</cffunction>

	<!--- code supplied by Luis Majano --->
	<cffunction name="getOSFileSeparator" access="public" returntype="any" output="false" hint="Get the operating system's file separator character">
        <cfscript>
        var objFile =  createObject("java","java.lang.System");
        return objFile.getProperty("file.separator");
        </cfscript>
    </cffunction>

	<cffunction name="structToArray" output="false" access="private" returntype="array">
		<cfargument name="thisStruct" type="struct" required="true" />

		<cfset var arrReturn = arrayNew(1) />
		<cfset var thisItem = "" />
		<cfloop collection="#arguments.thisStruct#" item="thisItem">
			<cfset arrayAppend(arrReturn,arguments.thisStruct[thisItem]) />
		</cfloop>
		<cfreturn arrReturn />
	</cffunction>

</cfcomponent>